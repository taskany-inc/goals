// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "debian-openssl-1.1.x"]
}

generator nexusPrisma {
  provider = "nexus-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Priority {
  Highest
  High
  Medium
  Low
  Lowest
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  password                 String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  active        Boolean   @default(true)
  nickname      String?   @unique
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)
  invites       Ghost[]   @relation("invite")
  host          User?     @relation("invited", fields: [hostId], references: [id])
  hostId        String?
  invited       User[]    @relation("invited")
  invitedAt     DateTime?
  activity      Activity? @relation(fields: [activityId], references: [id])
  activityId    String?   @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Ghost {
  id       String    @id @default(cuid())
  email    String    @unique
  host     User      @relation("invite", fields: [hostId], references: [id])
  hostId   String
  activity Activity?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([hostId])
}

model Activity {
  id                 String     @id @default(cuid())
  ghost              Ghost?     @relation(fields: [ghostId], references: [id])
  ghostId            String?    @unique
  user               User?
  comments           Comment[]
  reactions          Reaction[]
  projects           Project[]
  teams              Team[]
  estimates          Estimate[]
  teamParticipant    Team[]     @relation("teamParticipants")
  projectParticipant Project[]  @relation("projectParticipants")
  goalParticipant    Goal[]     @relation("goalParticipants")
  goalWatchers       Goal[]     @relation("goalWatchers")
  goalStargizers     Goal[]     @relation("goalStargizers")
  projectWatchers    Project[]  @relation("projectWatchers")
  projectStargizers  Project[]  @relation("projectStargizers")
  teamWatchers       Team[]     @relation("teamWatchers")
  teamStargizers     Team[]     @relation("teamStargizers")
  goalOwner          Goal[]     @relation("goalOwner")
  goalIssuer         Goal[]     @relation("goalIssuer")
  settings           Settings   @relation(fields: [settingsId], references: [id])
  settingsId         String     @unique
  tags               Tag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([ghostId])
}

model Project {
  id           Int        @id @default(autoincrement())
  key          String     @unique
  title        String
  description  String?
  parent       Project?   @relation("parentChildren", fields: [id], references: [id])
  children     Project[]  @relation("parentChildren")
  activity     Activity   @relation(fields: [activityId], references: [id])
  activityId   String
  teams        Team[]     @relation("teamProjects")
  participants Activity[] @relation("projectParticipants")
  goals        Goal[]     @relation("projectGoals")
  flow         Flow       @relation(fields: [flowId], references: [id])
  flowId       String
  tags         Tag[]
  watchers     Activity[] @relation("projectWatchers")
  stargizers   Activity[] @relation("projectStargizers")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([key])
  @@index([activityId])
}

model Team {
  id           Int        @id @default(autoincrement())
  slug         String     @unique @default(cuid())
  title        String     @unique
  description  String?
  parent       Team?      @relation("teamChildren", fields: [id], references: [id])
  children     Team[]     @relation("teamChildren")
  projects     Project[]  @relation("teamProjects")
  activity     Activity   @relation(fields: [activityId], references: [id])
  activityId   String
  participants Activity[] @relation("teamParticipants")
  goals        Goal[]     @relation("teamGoals")
  flow         Flow?       @relation(fields: [flowId], references: [id])
  flowId       String?
  watchers     Activity[] @relation("teamWatchers")
  stargizers   Activity[] @relation("teamStargizers")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([activityId])
}

model Estimate {
  id         Int      @id @default(autoincrement())
  q          String
  y          String
  date       String
  goal       Goal     @relation(fields: [goalId], references: [id])
  goalId     String
  activity   Activity @relation(fields: [activityId], references: [id])
  activityId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([goalId])
}

model Goal {
  id           String     @id
  title        String
  description  String
  key          Boolean?
  personal     Boolean?
  private      Boolean?
  priority     String?
  estimate     Estimate[]
  project      Project?   @relation("projectGoals", fields: [projectId], references: [id])
  projectId    Int?
  team         Team?      @relation("teamGoals", fields: [teamId], references: [id])
  teamId       Int?
  state        State?     @relation("goalState", fields: [stateId], references: [id])
  stateId      String?
  activity     Activity?  @relation("goalIssuer", fields: [activityId], references: [id])
  activityId   String?
  owner        Activity?  @relation("goalOwner", fields: [ownerId], references: [id])
  ownerId      String?
  participants Activity[] @relation("goalParticipants")
  watchers     Activity[] @relation("goalWatchers")
  stargizers   Activity[] @relation("goalStargizers")
  comments     Comment[]
  reactions    Reaction[]
  tags         Tag[]
  dependsOn    Goal[]     @relation("dependsOn")
  blocks       Goal[]     @relation("dependsOn")
  relatedTo    Goal[]     @relation("connected")
  connected    Goal[]     @relation("connected")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([ownerId])
  @@index([activityId])
}

model Comment {
  id          String     @id @default(cuid())
  description String
  activity    Activity   @relation(fields: [activityId], references: [id])
  activityId  String
  goal        Goal       @relation(fields: [goalId], references: [id])
  goalId      String
  reactions   Reaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([activityId])
  @@index([goalId])
}

model Reaction {
  id         String   @id @default(cuid())
  emoji      String
  activity   Activity @relation(fields: [activityId], references: [id])
  activityId String
  goal       Goal?    @relation(fields: [goalId], references: [id])
  goalId     String?
  comment    Comment? @relation(fields: [commentId], references: [id])
  commentId  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([activityId])
  @@index([goalId])
  @@index([commentId])
}

model Flow {
  id          String     @id @default(cuid())
  title       String     @unique
  graph       String? // [[stateId, stateId], [stateId, stateId]] â€” any transition allowed if undefined
  settings    Settings[]
  projects    Project[]
  teams       Team[]
  states      State[]
  recommended Boolean?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model State {
  id      String   @id @default(cuid())
  title   String   @unique
  flows   Flow[]
  default Boolean?
  hue     Int      @default(1)
  goals   Goal[]   @relation("goalState")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Settings {
  id       String    @id @default(cuid())
  theme    String    @default("system")
  flow     Flow?     @relation(fields: [flowId], references: [id])
  flowId   String?
  activity Activity?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Tag {
  id          String    @id @default(cuid())
  title       String
  description String?
  goals       Goal[]
  project     Project[]
  activity    Activity  @relation(fields: [activityId], references: [id])
  activityId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
