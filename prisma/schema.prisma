// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator nexusPrisma {
  provider = "nexus-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  password                 String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  active        Boolean   @default(true)
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)
  invites       Ghost[]   @relation("invite")
  host          User?     @relation("invited", fields: [host_id], references: [id])
  host_id       String?
  invited       User[]    @relation("invited")
  invited_at    DateTime?
  activity      Activity? @relation(fields: [activity_id], references: [id])
  activity_id   String?   @unique

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model Ghost {
  id       String    @id @default(cuid())
  email    String    @unique
  host     User      @relation("invite", fields: [host_id], references: [id])
  host_id  String
  activity Activity?

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@index([host_id])
}

model Activity {
  id                 String     @id @default(cuid())
  ghost              Ghost?     @relation(fields: [ghost_id], references: [id])
  ghost_id           String?    @unique
  user               User?
  comments           Comment[]
  reactions          Reaction[]
  projects           Project[]
  projectParticipant Project[]  @relation("projectParticipants")
  goalParticipant    Goal[]     @relation("goalParticipants")
  goalOwner          Goal[]     @relation("goalOwner")
  goalIssuer         Goal[]     @relation("goalIssuer")

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@index([ghost_id])
}

model Project {
  id           Int        @id @default(autoincrement())
  slug         String?    @unique
  title        String
  description  String?
  parent       Project?   @relation("parentChildren", fields: [id], references: [id])
  children     Project[]  @relation("parentChildren")
  owner        Activity?  @relation(fields: [owner_id], references: [id])
  owner_id     String?
  participants Activity[] @relation("projectParticipants")
  goals        Goal[]     @relation("projectGoals")
  flow         Flow?      @relation(fields: [flow_id], references: [id])
  flow_id      String?

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@index([slug])
}

model Estimate {
  id      Int     @id @default(autoincrement())
  q       String?
  y       String?
  date    String?
  goal    Goal    @relation(fields: [goal_id], references: [id])
  goal_id Int

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@index([goal_id])
}

model Goal {
  id           Int        @id @default(autoincrement())
  title        String
  description  String
  key          Boolean?
  personal     Boolean?
  private      Boolean?
  estimate     Estimate[]
  criteria     Criteria[] // not implemented
  project      Project?   @relation("projectGoals", fields: [project_id], references: [id])
  project_id   Int?
  issuer       Activity?  @relation("goalIssuer", fields: [issuer_id], references: [id])
  issuer_id    String?
  owner        Activity?  @relation("goalOwner", fields: [owner_id], references: [id])
  owner_id     String?
  participants Activity[] @relation("goalParticipants")
  comments     Comment[] // not implemented
  reactions    Reaction[] // not implemented

  dependsOn Goal[] @relation("dependsOn")
  blocks    Goal[] @relation("dependsOn")
  relatedTo Goal[] @relation("connected")
  connected Goal[] @relation("connected")

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@index([owner_id])
  @@index([issuer_id])
}

model Criteria {
  id      String  @id @default(cuid())
  title   String
  done    Boolean
  goal    Goal    @relation(fields: [goal_id], references: [id])
  goal_id Int

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@index([goal_id])
}

model Comment {
  id          String     @id @default(cuid())
  description String
  author      Activity   @relation(fields: [author_id], references: [id])
  author_id   String
  goal        Goal       @relation(fields: [goal_id], references: [id])
  goal_id     Int
  reactions   Reaction[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@index([author_id])
  @@index([goal_id])
}

model Reaction {
  id         String   @id @default(cuid())
  emoji      String
  author     Activity @relation(fields: [author_id], references: [id])
  author_id  String
  goal       Goal?    @relation(fields: [goal_id], references: [id])
  goal_id    Int?
  comment    Comment? @relation(fields: [comment_id], references: [id])
  comment_id String?

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@index([author_id])
  @@index([goal_id])
  @@index([comment_id])
}

model Flow {
  id       String    @id @default(cuid())
  title    String    @unique
  graph    String? // [[stateId, stateId], [stateId, stateId]] â€” any transition allowed if undefined
  projects Project[]
  states   State[]
}

model State {
  id    String @id @default(cuid())
  title String @unique
  flows Flow[]
}
