type Activity {
  created_at: DateTime!
  ghost: Ghost
  id: ID!
  updated_at: DateTime!
  user: User
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Estimate {
  date: String
  id: Int!
  q: String
  y: String
}

type Ghost {
  activity: Activity
  created_at: DateTime!
  email: String!
  host: User
  host_id: String!
  id: ID!
  updated_at: DateTime!
  user: User
}

type Goal {
  blocks: [Goal]
  computedOwner: UserAnyKind
  connected: [Goal]
  created_at: DateTime!
  dependsOn: [Goal]
  description: String!
  estimate: Estimate
  id: Int!
  issuer: Activity
  issuer_id: String
  key: Boolean
  owner: Activity
  owner_id: String
  participants: [Activity]
  personal: Boolean
  private: Boolean
  project: [Project]
  project_id: Int
  relatedTo: [Goal]
  title: String!
  updated_at: DateTime!
}

input GoalEstimate {
  date: String
  q: String
  y: String
}

type Mutation {
  createGoal(description: String!, estimate: GoalEstimate, key: Boolean, owner_id: String!, personal: Boolean, private: Boolean, project_id: Int!, title: String!, user: UserSession!): Goal
  createProject(description: String, owner_id: String!, title: String!, user: UserSession!): Project
  inviteUser(email: String!, user: UserSession!): Ghost
}

type Project {
  computedOwner: UserAnyKind
  created_at: DateTime!
  description: String
  goals: [Goal]
  id: Int!
  owner: Activity
  slug: String
  title: String!
  updated_at: DateTime!
}

type Query {
  findGhost(query: String!, sortBy: SortOrder): [Ghost]
  findUser(query: String!, sortBy: SortOrder): [User]
  findUserAnyKind(query: String!, sortBy: SortOrder): [UserAnyKind]
  project(slug: String!): Project
  projectGoals(slug: String!): [Goal]
  projectsCompletion(query: String!, sortBy: SortOrder): [Project]
  users(sortBy: SortOrder): [User]
}

enum Role {
  ADMIN
  USER
}

enum SortOrder {
  asc
  desc
}

type User {
  activity: Activity
  activity_id: String
  created_at: DateTime!
  email: String!
  id: ID!
  image: String
  name: String
  role: Role!
  updated_at: DateTime!
}

type UserAnyKind {
  activity: Activity
  email: String
  id: String
  image: String
  kind: UserKind
  name: String
}

enum UserKind {
  GHOST
  USER
}

input UserSession {
  email: String!
  id: ID!
  image: String
  name: String
  role: Role!
}
