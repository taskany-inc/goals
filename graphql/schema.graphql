### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Activity {
  createdAt: DateTime!
  ghost: Ghost
  id: ID!
  settings: Settings
  tags: [Tag]
  updatedAt: DateTime!
  user: User
}

input ActivityInput {
  id: ID!
}

type Comment {
  activity: Activity
  author: Activity
  createdAt: DateTime!
  description: String!
  id: ID!
  reactions: [Reaction]
  updatedAt: DateTime!
}

input CommentCreateInput {
  activityId: String!
  description: String!
  goalId: String!
}

input CommentDeleteInput {
  id: ID!
}

input CommentUpdateInput {
  description: String!
  id: ID!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

enum Dependency {
  blocks
  dependsOn
  relatedTo
}

type Estimate {
  activity: Activity
  activityId: String!
  date: String!
  id: Int!
  q: String!
  y: String!
}

input EstimateInput {
  date: String!
  q: String!
  y: String!
}

input FindActivityInput {
  filter: [String!]
  query: String!
}

type Flow {
  graph: String
  id: ID!
  projects: [Project]
  states: [State]
  title: String!
}

type Ghost {
  activity: Activity
  createdAt: DateTime!
  email: String!
  host: User
  hostId: String!
  id: ID!
  updatedAt: DateTime!
  user: User
}

type Goal {
  _count: GoalAggregation
  _isStarred: Boolean
  _isWatching: Boolean
  activity: Activity
  activityId: String
  blocks: [Goal]
  comments: [Comment]
  connected: [Goal]
  createdAt: DateTime!
  dependsOn: [Goal]
  description: String!
  estimate: [Estimate]
  id: ID!
  key: Boolean
  owner: Activity
  ownerId: String
  participants: [Activity]
  personal: Boolean
  priority: String
  private: Boolean
  project: Project
  projectId: Int
  reactions: [Reaction]
  relatedTo: [Goal]
  stargizers: [Activity]
  state: State
  stateId: String
  tags: [Tag]
  team: Team
  teamId: Int
  title: String!
  updatedAt: DateTime!
  watchers: [Activity]
}

type GoalAggregation {
  comments: Int
  stargizers: Int
}

input GoalCreateInput {
  description: String!
  estimate: EstimateInput
  key: Boolean
  kind: String
  ownerId: String
  parent: Int
  participants: [ActivityInput]
  personal: Boolean
  priority: String
  private: Boolean
  stateId: String
  tags: [TagInput]
  title: String!
}

input GoalDependencyToggleInput {
  dependency: Dependency
  direction: Boolean
  id: ID!
  target: String
}

input GoalUpdateInput {
  description: String
  estimate: EstimateInput
  id: ID!
  key: Boolean
  kind: String
  ownerId: String
  parent: Int
  participants: [String]
  personal: Boolean
  priority: String
  private: Boolean
  stateId: String
  tags: [TagInput]
  title: String
}

type Mutation {
  createComment(data: CommentCreateInput!): Comment
  createGoal(data: GoalCreateInput!): Goal
  createProject(data: ProjectCreateInput!): Project
  createTag(description: String, title: String!): Tag
  createTeam(data: TeamCreateInput!): Team
  deleteComment(data: CommentDeleteInput!): Comment
  deleteProject(data: ProjectDelete!): Project
  deleteTeam(data: TeamDelete!): Team
  toggleGoalDependency(toggle: GoalDependencyToggleInput!): Goal
  toggleGoalStargizer(data: SubscriptionToggleInput!): Activity
  toggleGoalWatcher(data: SubscriptionToggleInput!): Activity
  toggleProjectStargizer(data: SubscriptionToggleInput!): Activity
  toggleProjectWatcher(data: SubscriptionToggleInput!): Activity
  toggleReaction(data: ReactionToggleInput!): Reaction
  toggleTeamStargizer(data: SubscriptionToggleInput!): Activity
  toggleTeamWatcher(data: SubscriptionToggleInput!): Activity
  updateComment(data: CommentUpdateInput!): Comment
  updateGoal(data: GoalUpdateInput!): Goal
  updateProject(data: ProjectUpdateInput!): Project
  updateSettings(data: SettingsUpdateInput!): Settings
  updateTeam(data: TeamUpdateInput!): Team
  updateUser(data: UserUpdateInput!): User
  usersInvites(input: UserInvitesInput!): [Ghost]
}

enum Priority {
  High
  Highest
  Low
  Medium
}

type Project {
  _count: ProjectAggregation
  _isStarred: Boolean
  _isWatching: Boolean
  activity: Activity
  activityId: String!
  children: [Project]
  createdAt: DateTime!
  description: String
  flow: Flow
  flowId: String!
  goals: [Goal]
  id: Int!
  key: String!
  parent: Project
  participants: [Activity]
  stargizers: [Activity]
  tags: [Tag]
  teams: [Team]
  title: String!
  updatedAt: DateTime!
  watchers: [Activity]
}

type ProjectAggregation {
  stargizers: Int
}

input ProjectCreateInput {
  description: String
  flowId: String!
  key: String!
  title: String!
}

input ProjectDelete {
  id: Int!
}

input ProjectGoalsCountInput {
  key: String!
  owner: [String!]!
  query: String!
  states: [String!]!
  tags: [String!]!
}

input ProjectGoalsInput {
  key: String!
  offset: Int!
  owner: [String!]!
  pageSize: Int!
  query: String!
  states: [String!]!
  tags: [String!]!
}

input ProjectUpdateInput {
  description: String
  id: Int!
  title: String!
}

type Query {
  findActivity(data: FindActivityInput!): [Activity]
  findGoal(query: String!): [Goal]
  flow(id: String!): Flow
  flowCompletion(query: String!, sortBy: SortOrder): [Flow]
  flowRecommended: [Flow]
  goal(id: String!): Goal
  goalComment(goalId: String!): [Comment]
  goalDependencyKind: [String]
  goalPriorityColors: [Int]
  goalPriorityKind: [String]
  project(key: String!): Project
  projectCompletion(query: String!, sortBy: SortOrder): [Project]
  projectGoals(data: ProjectGoalsInput!): [Goal]
  projectGoalsCount(data: ProjectGoalsCountInput!): Int
  projects: [Project]
  settings: Settings
  tagCompletion(query: String!, sortBy: SortOrder): [Tag]
  team(slug: String!): Team
  teamCompletion(query: String!, sortBy: SortOrder): [Team]
  teamGoals(data: TeamGoalsInput!): [Goal]
  teamProjects(data: TeamProjectsInput!): [Project]
  teams(data: TeamsInput!): [Team]
  userGoals(data: UserGoalsInput!): [Project]
  users(sortBy: SortOrder): [User]
}

type Reaction {
  activity: Activity
  activityId: String!
  createdAt: DateTime!
  emoji: String!
  goal: Goal
  goalId: String
  id: ID!
  updatedAt: DateTime!
}

input ReactionToggleInput {
  commentId: String
  emoji: String!
  goalId: String
}

enum Role {
  ADMIN
  USER
}

type Settings {
  activity: Activity
  id: ID!
  theme: String!
}

input SettingsUpdateInput {
  id: ID!
  theme: String!
}

enum SortOrder {
  asc
  desc
}

type State {
  default: Boolean
  flows: [Flow]
  hue: Int!
  id: ID!
  title: String!
}

input SubscriptionToggleInput {
  direction: Boolean
  id: String
}

type Tag {
  activity: Activity
  activityId: String!
  description: String
  goals: [Goal]
  id: ID!
  projects: [Project]
  title: String!
}

input TagInput {
  description: String
  id: ID!
  title: String!
}

type Team {
  _count: TeamAggregation
  activity: Activity
  activityId: String!
  children: [Team]
  createdAt: DateTime!
  description: String
  flow: Flow
  flowId: String
  goals: [Goal]
  id: Int!
  parent: Team
  participants: [Activity]
  projects: [Project]
  slug: String!
  stargizers: [Activity]
  title: String!
  updatedAt: DateTime!
  watchers: [Activity]
}

type TeamAggregation {
  participants: Int
  projects: Int
}

input TeamCreateInput {
  children: [Int!]
  description: String
  key: String
  parent: Int
  projects: [String!]
  title: String!
}

input TeamDelete {
  id: Int!
}

input TeamGoalsInput {
  owner: [String!]!
  query: String!
  slug: String!
  states: [String!]!
  tags: [String!]!
}

input TeamProjectsInput {
  owner: [String!]!
  query: String!
  slug: String!
  states: [String!]!
  tags: [String!]!
}

input TeamUpdateInput {
  children: [Int!]
  description: String
  id: Int!
  parent: Int
  projects: [String!]
  title: String!
}

input TeamsInput {
  title: String
}

type User {
  activity: Activity
  activityId: String
  createdAt: DateTime!
  email: String!
  id: ID!
  image: String
  name: String
  nickname: String
  role: Role!
  updatedAt: DateTime!
}

input UserGoalsInput {
  owner: [String!]!
  query: String!
  states: [String!]!
  tags: [String!]!
}

input UserInvitesInput {
  emails: [String]
}

input UserUpdateInput {
  id: ID!
  name: String
  nickname: String
}
