### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Activity {
  createdAt: DateTime!
  ghost: Ghost
  id: ID!
  settings: Settings
  tags: [Tag]
  updatedAt: DateTime!
  user: User
}

type Comment {
  activity: Activity
  author: Activity
  createdAt: DateTime!
  description: String!
  id: ID!
  reactions: [Reaction]
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

enum Dependency {
  blocks
  dependsOn
  relatedTo
}

type Estimate {
  activity: Activity
  activityId: String!
  date: String!
  id: Int!
  q: String!
  y: String!
}

input EstimateInput {
  date: String!
  q: String!
  y: String!
}

enum FilterMode {
  Global
  Project
  User
}

input FindActivityInput {
  filter: [String!]
  query: String!
}

type Ghost {
  activity: Activity
  createdAt: DateTime!
  email: String!
  host: User
  hostId: String!
  id: ID!
  updatedAt: DateTime!
  user: User
}

type Goal {
  _count: GoalAggregation
  _isEditable: Boolean
  _isIssuer: Boolean
  _isOwner: Boolean
  _isParticipant: Boolean
  _isStarred: Boolean
  _isWatching: Boolean
  _lastEstimate: Estimate
  activity: Activity
  activityId: String
  archived: Boolean
  blocks: [Goal]
  comments: [Comment]
  connected: [Goal]
  createdAt: DateTime!
  dependsOn: [Goal]
  description: String!
  estimate: [Estimate]
  id: ID!
  key: Boolean
  kind: String
  owner: Activity
  ownerId: String
  participants: [Activity]
  personal: Boolean
  priority: String
  private: Boolean
  project: Project
  projectId: String
  reactions: [Reaction]
  relatedTo: [Goal]
  stargizers: [Activity]
  state: State
  stateId: String
  tags: [Tag]
  title: String!
  updatedAt: DateTime!
  watchers: [Activity]
}

type GoalAggregation {
  comments: Int
  stargizers: Int
  watchers: Int
}

input GoalArchiveInput {
  archived: Boolean
  id: ID!
}

input GoalCreateInput {
  description: String!
  estimate: EstimateInput
  key: Boolean
  ownerId: String
  personal: Boolean
  priority: String
  private: Boolean
  projectId: String
  stateId: String
  title: String!
}

input GoalDependencyToggleInput {
  dependency: Dependency
  direction: Boolean
  id: ID!
  target: String
}

input GoalUpdateInput {
  description: String
  estimate: EstimateInput
  id: ID!
  key: Boolean
  ownerId: String
  participants: [String]
  personal: Boolean
  priority: String
  private: Boolean
  projectId: String
  stateId: String
  title: String
}

type GoalsMetaOutput {
  count: Int!
  estimates: [Estimate!]
  issuers: [Activity!]
  owners: [Activity!]
  participants: [Activity!]
  priority: [String!]
  projects: [Project!]
  states: [State!]
  tags: [Tag!]
}

type Mutation {
  createGoal(data: GoalCreateInput!): Goal
  toggleGoalArchive(data: GoalArchiveInput!): Activity
  toggleGoalDependency(data: GoalDependencyToggleInput!): Goal
  toggleGoalStargizer(data: SubscriptionToggleInput!): Activity
  toggleGoalWatcher(data: SubscriptionToggleInput!): Activity
  updateGoal(data: GoalUpdateInput!): Goal
}

type Project {
  _count: ProjectAggregation
  _isOwner: Boolean
  _isStarred: Boolean
  _isWatching: Boolean
  activity: Activity
  activityId: String!
  children: [Project!]
  createdAt: DateTime!
  description: String
  flowId: String!
  goals: [Goal!]
  id: ID!
  parent: [Project!]
  participants: [Activity]
  stargizers: [Activity]
  tags: [Tag]
  title: String!
  updatedAt: DateTime!
  watchers: [Activity]
}

type ProjectAggregation {
  children: Int
  parent: Int
  participants: Int
  stargizers: Int
  watchers: Int
}

input ProjectCreateInput {
  description: String
  flowId: String!
  id: ID!
  title: String!
}

input ProjectDeepInput {
  estimates: [String!]!
  id: ID!
  owner: [String!]!
  priority: [String!]!
  projects: [String!]!
  query: String!
  states: [String!]!
  tags: [String!]!
}

type ProjectDeepOutput {
  goals: [Goal!]
  meta: GoalsMetaOutput
}

input ProjectDelete {
  id: ID!
}

input ProjectInput {
  id: ID!
}

input ProjectUpdateInput {
  description: String
  id: ID!
  parent: [String!]!
  title: String!
}

type Query {
  findGoal(query: String!): [Goal]
  goal(id: String!): Goal
  goalDependencyKind: [String]
  userGoals(data: UserGoalsInput!): UserGoalsOutput
}

type Reaction {
  activity: Activity
  activityId: String!
  createdAt: DateTime!
  emoji: String!
  goal: Goal
  goalId: String
  id: ID!
  updatedAt: DateTime!
}

enum Role {
  ADMIN
  USER
}

type Settings {
  activity: Activity
  id: ID!
  theme: String!
}

enum SortOrder {
  asc
  desc
}

type State {
  default: Boolean
  hue: Int!
  id: ID!
  title: String!
}

input SubscriptionToggleInput {
  direction: Boolean
  id: String
}

type Tag {
  activity: Activity
  activityId: String!
  description: String
  goals: [Goal]
  id: ID!
  projects: [Project]
  title: String!
}

input TransferOwnershipInput {
  activityId: String!
  id: String!
}

type User {
  activity: Activity
  activityId: String
  createdAt: DateTime!
  email: String!
  id: ID!
  image: String
  name: String
  nickname: String
  role: Role!
  updatedAt: DateTime!
}

input UserGoalsInput {
  estimates: [String!]!
  owner: [String!]!
  priority: [String!]!
  projects: [String!]!
  query: String!
  states: [String!]!
  tags: [String!]!
}

type UserGoalsOutput {
  goals: [Goal!]
  meta: GoalsMetaOutput
}
