### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Activity {
  createdAt: DateTime!
  ghost: Ghost
  id: ID!
  settings: Settings
  tags: [Tag]
  updatedAt: DateTime!
  user: User
}

input ActivityInput {
  id: ID!
}

type Comment {
  activity: Activity
  author: UserAnyKind
  computedAuthor: UserAnyKind
  createdAt: DateTime!
  description: String!
  id: ID!
  updatedAt: DateTime!
}

input CommentInput {
  activityId: String!
  description: String!
  goalId: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

enum Dependency {
  blocks
  dependsOn
  relatedTo
}

type Estimate {
  activity: Activity
  activityId: String!
  date: String!
  id: Int!
  q: String!
  y: String!
}

input EstimateInput {
  date: String!
  q: String!
  y: String!
}

type Flow {
  graph: String
  id: ID!
  projects: [Project]
  states: [State]
  title: String!
}

type Ghost {
  activity: Activity
  createdAt: DateTime!
  email: String!
  host: User
  hostId: String!
  id: ID!
  updatedAt: DateTime!
  user: User
}

type Goal {
  activity: Activity
  activityId: String
  blocks: [Goal]
  comments: [Comment]
  computedActivity: UserAnyKind
  computedOwner: UserAnyKind
  connected: [Goal]
  createdAt: DateTime!
  dependsOn: [Goal]
  description: String!
  estimate: [Estimate]
  id: ID!
  key: Boolean
  owner: Activity
  ownerId: String
  participants: [Activity]
  personal: Boolean
  private: Boolean
  project: Project
  projectId: Int
  reactions: [Reaction]
  relatedTo: [Goal]
  stargizers: [Activity]
  state: State
  stateId: String
  tags: [Tag]
  title: String!
  updatedAt: DateTime!
  watchers: [Activity]
}

input GoalCreateInput {
  description: String!
  estimate: EstimateInput
  key: Boolean
  ownerId: String
  participants: [ActivityInput]
  personal: Boolean
  private: Boolean
  projectId: Int
  stateId: String
  tags: [TagInput]
  title: String!
}

input GoalDependencyInput {
  dependency: Dependency
  direction: Boolean
  id: ID!
  target: String
}

input GoalInput {
  description: String
  estimate: EstimateInput
  id: ID!
  key: Boolean
  ownerId: String
  participants: [String]
  personal: Boolean
  private: Boolean
  projectId: Int
  stateId: String
  tags: [TagInput]
  title: String
}

type Mutation {
  createComment(authorId: String!, description: String!, goalId: String!): Comment
  createGoal(goal: GoalCreateInput!): Goal
  createProject(data: ProjectInput!): Project
  createTag(description: String, title: String!): Tag
  deleteProject(data: ProjectDelete!): Project
  toggleGoalDependency(toggle: GoalDependencyInput!): Goal
  toggleGoalStargizer(toggle: SubscriptionInput!): Activity
  toggleGoalWatcher(toggle: SubscriptionInput!): Activity
  toggleProjectStargizer(toggle: SubscriptionInput!): Activity
  toggleProjectWatcher(toggle: SubscriptionInput!): Activity
  toggleReaction(reaction: ReactionInput!): Reaction
  updateGoal(goal: GoalInput!): Goal
  updateProject(data: ProjectInput!): Project
  updateSettings(data: SettingsInput!): Settings
  updateUser(data: UserInput!): User
  usersInvites(input: UserInvitesInput!): [Ghost]
}

type Project {
  activity: Activity
  activityId: String!
  computedActivity: UserAnyKind
  createdAt: DateTime!
  description: String
  flow: Flow
  flowId: String!
  goals: [Goal]
  id: Int!
  key: String!
  stargizers: [Activity]
  tags: [Tag]
  title: String!
  updatedAt: DateTime!
  watchers: [Activity]
}

input ProjectDelete {
  key: String!
}

input ProjectGoalsCountInput {
  key: String!
  query: String!
  states: [String!]!
  tags: [String!]!
}

input ProjectGoalsInput {
  key: String!
  offset: Int!
  pageSize: Int!
  query: String!
  states: [String!]!
  tags: [String!]!
}

input ProjectInput {
  description: String
  flowId: String!
  key: String!
  title: String!
}

type Query {
  findGoal(query: String!): [Goal]
  findUserAnyKind(query: String!): [UserAnyKind]
  flow(id: String!): Flow
  flowCompletion(query: String!, sortBy: SortOrder): [Flow]
  flowRecommended: [Flow]
  goal(id: String!): Goal
  goalComment(goalId: String!): [Comment]
  goalDependencyKind: [String]
  goalUserIndex(offset: Int!, pageSize: Int!): [Goal]
  project(key: String!): Project
  projectCompletion(query: String!, sortBy: SortOrder): [Project]
  projectGoals(data: ProjectGoalsInput!): [Goal]
  projectGoalsCount(data: ProjectGoalsCountInput!): Int
  projects: [Project]
  settings: Settings
  tagCompletion(query: String!, sortBy: SortOrder): [Tag]
  users(sortBy: SortOrder): [User]
}

type Reaction {
  activity: Activity
  activityId: String!
  computedAuthor: UserAnyKind
  createdAt: DateTime!
  emoji: String!
  goal: Goal
  goalId: String
  id: ID!
  updatedAt: DateTime!
}

input ReactionInput {
  commentId: String
  emoji: String!
  goalId: String
}

enum Role {
  ADMIN
  USER
}

type Settings {
  activity: Activity
  id: ID!
  theme: String!
}

input SettingsInput {
  id: ID!
  theme: String!
}

enum SortOrder {
  asc
  desc
}

type State {
  default: Boolean
  flows: [Flow]
  hue: Int!
  id: ID!
  title: String!
}

input SubscriptionInput {
  direction: Boolean
  id: String
}

type Tag {
  activity: Activity
  activityId: String!
  description: String
  goals: [Goal]
  id: ID!
  projects: [Project]
  title: String!
}

input TagInput {
  description: String
  id: ID!
  title: String!
}

type User {
  activity: Activity
  activityId: String
  createdAt: DateTime!
  email: String!
  id: ID!
  image: String
  name: String
  nickname: String
  role: Role!
  updatedAt: DateTime!
}

type UserAnyKind {
  activity: Activity
  email: String
  id: String
  image: String
  kind: UserKind
  name: String
}

input UserInput {
  id: ID!
  name: String
  nickname: String
}

input UserInvitesInput {
  emails: [String]
}

enum UserKind {
  GHOST
  USER
}
