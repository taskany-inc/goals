### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Activity {
  createdAt: DateTime!
  ghost: Ghost
  id: ID!
  tags: [Tag]
  updatedAt: DateTime!
  user: User
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Estimate {
  date: String
  id: Int!
  q: String
  y: String
}

type Flow {
  graph: String
  id: ID!
  projects: [Project]
  states: [State]
  title: String!
}

type Ghost {
  activity: Activity
  createdAt: DateTime!
  email: String!
  host: User
  hostId: String!
  id: ID!
  updatedAt: DateTime!
  user: User
}

type Goal {
  blocks: [Goal]
  computedIssuer: UserAnyKind
  computedOwner: UserAnyKind
  connected: [Goal]
  createdAt: DateTime!
  dependsOn: [Goal]
  description: String!
  estimate: Estimate
  id: ID!
  issuer: Activity
  issuerId: String
  key: Boolean
  owner: Activity
  ownerId: String
  participants: [Activity]
  personal: Boolean
  private: Boolean
  project: Project
  projectId: Int
  relatedTo: [Goal]
  state: State
  stateId: String
  tags: [Tag]
  title: String!
  updatedAt: DateTime!
}

input GoalEstimate {
  date: String
  q: String
  y: String
}

type Mutation {
  createGoal(description: String!, estimate: GoalEstimate, key: Boolean, ownerId: String!, personal: Boolean, private: Boolean, projectId: Int!, stateId: String, tags: [String!], title: String!, user: UserSession!): Goal
  createProject(description: String, flowId: String!, key: String!, ownerId: String!, title: String!, user: UserSession!): Project
  createTag(description: String, title: String!, user: UserSession!): Tag
  inviteUser(email: String!, user: UserSession!): Ghost
}

type Project {
  computedOwner: UserAnyKind
  createdAt: DateTime!
  description: String
  flow: Flow
  goals: [Goal]
  id: Int!
  key: String!
  owner: Activity
  tags: [Tag]
  title: String!
  updatedAt: DateTime!
}

type Query {
  findUserAnyKind(query: String!, sortBy: SortOrder): [UserAnyKind]
  flow(id: String!): Flow
  flowCompletion(query: String!, sortBy: SortOrder): [Flow]
  flowRecommended: [Flow]
  goal(id: String!): Goal
  goalUserIndex(user: UserSession!): [Goal]
  project(key: String!): Project
  projectCompletion(query: String!, sortBy: SortOrder): [Project]
  projectGoals(key: String!): [Goal]
  tagCompletion(query: String!, sortBy: SortOrder): [Tag]
  users(sortBy: SortOrder): [User]
}

enum Role {
  ADMIN
  USER
}

enum SortOrder {
  asc
  desc
}

type State {
  default: Boolean
  flows: [Flow]
  id: ID!
  title: String!
}

type Tag {
  activity: Activity
  activityId: String
  description: String
  goals: [Goal]
  id: ID!
  projects: [Project]
  title: String!
}

type User {
  activity: Activity
  activityId: String
  createdAt: DateTime!
  email: String!
  id: ID!
  image: String
  name: String
  role: Role!
  updatedAt: DateTime!
}

type UserAnyKind {
  activity: Activity
  email: String
  id: String
  image: String
  kind: UserKind
  name: String
}

enum UserKind {
  GHOST
  USER
}

input UserSession {
  email: String!
  id: ID!
  image: String
  name: String
  role: Role!
}
